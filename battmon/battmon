#!/bin/bash

# battmon version 0.9.7 designed for Cub Linux
# 
# Simple battery monitoring applet for any panel with a notification area or 
# system tray eg lxpanel, tint2 etc... It uses acpi to check battery status, 
# Yad to create the tray icon, pm-utils for hibernation support and libnotify
# for messaging the user. This applet will optionally beep in critical battery
# level.
# The tray icons were originally adapted from KDE4 Oxygen icons, but users can 
# choose to use icons from the current GTK theme.
# Just add [pathto/battmon &] to your openbox autostart.sh file and it will sit 
# in the system tray
#
# Depends: acpi, pm-utils, yad, libnotify-bin
# 
# Created by RichJack, 2010, 2015
# originally for Chameleon OS and later for Chromixium OS and then Cub Linux:
# https://cublinux.com
# Thanks to Gareth Edwards for help and adaptations on the now defunct Unity
# Linux forums.
# Yad and libnotify adaptations with thanks from fuzebest:
# https://chameleonos.wordpress.com/projects/battmon/
# Licence: GPL v2
#
# Battmon is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 2 of
# the License, or (at your option) any later version.
#
# Battmon is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Systray Battery Monitor.  If not, see
# <http://www.gnu.org/licenses/>.
#
# Quit function
function quit_monitoring(){
YADPID=$(cat /tmp/yadpid.tmp | awk '{print $1}')
rm -f /tmp/yadpid.tmp
kill -9 $YADPID > /dev/null 2>&1 &
wait;
killall battmon > /dev/null 2>&1 &
wait;
exit 0
}
#
################### USER INTERACTION ######################
#
# Default icon path and delay between tooltip updates
# Edit this icon path to use your own icons
ICON_DIR=/usr/local/share/battmon/icons/
DELAY=10
BEEP=0
HIB=0
# Command line options and usage message
while getopts s:bhgfqu opt
do
    case "$opt" in
      s)  DELAY="$OPTARG";;
      b)  BEEP=1;;
      h)  HIB=1;;
      g)  GTK=1;;
      f)  ls "/usr/local/share/battmon/icons" | sed 's/[*]//'  # print icon filenames and exit
          exit 0;;
      q)  quit_monitoring;;  # kill script and all yad instances associated with it
      u|\?)		   # unknown flag
      	  echo >&2 \
"
battmon - acpi battery monitor applet
designed for Chromixium OS by RichJack, 2015

    VERSION: 0.9.7
	  
    USAGE:
    -s sleep delay (update interval) between battery check in secs eg -s 20
    -g use current GTK icon theme instead of default icons
    -b beep on critical battery level (5%)
    -h hibernate (suspend to disk) on critical battery level (5%) 
       [uses pm-hibernate so you need pm-utils installed]
    -f print default icon filenames and exit
    -q quit, stop monitoring, kill tray icon, go away...
    -u print these usage instructions and exit
    
    DEFAULTS:
    You don't need to add any command line arguments if you are 
    happy with these defaults:
    sleep 10, no beep, no hibernate, default icons
    "
	  exit 1;;
    esac
done
shift `expr $OPTIND - 1`

# Set status icon filenames as variables
if [[ $GTK -ne 1 ]]; then
    ICON_DIR=/usr/local/share/battmon/icons/
    ICON_C0_5="battery_charging_0-5.png"
    ICON_C6_9="battery_charging_6-9.png"
    ICON_C10_19="battery_charging_10-19.png"
    ICON_C20_29="battery_charging_20-29.png"
    ICON_C30_41="battery_charging_30-41.png"
    ICON_C42_53="battery_charging_42-53.png"
    ICON_C54_65="battery_charging_54-65.png"
    ICON_C66_77="battery_charging_66-77.png"
    ICON_C78_89="battery_charging_78-89.png"
    ICON_C90_100="battery_charging_90-100.png"
    ICON_D0_5="battery_discharging_0-5.png"
    ICON_D6_9="battery_discharging_6-9.png"
    ICON_D10_19="battery_discharging_10-19.png"
    ICON_D20_29="battery_discharging_20-29.png"
    ICON_D30_41="battery_discharging_30-41.png"
    ICON_D42_53="battery_discharging_42-53.png"
    ICON_D54_65="battery_discharging_54-65.png"
    ICON_D66_77="battery_discharging_66-77.png"
    ICON_D78_89="battery_discharging_78-89.png"
    ICON_D90_100="battery_discharging_90-100.png"
    ICON_AC="ac-adapter.png"
    ICON_ERR="battery-error.png"
else
    ICON_DIR=
    ICON_C0_5="gpm-battery-000-charging"
    ICON_C6_9="gpm-battery-020-charging"
    ICON_C10_19="gpm-battery-020-charging"
    ICON_C20_29="gpm-battery-020-charging"
    ICON_C30_41="gpm-battery-040-charging"
    ICON_C42_53="gpm-battery-040-charging"
    ICON_C54_65="gpm-battery-060-charging"
    ICON_C66_77="gpm-battery-060-charging"
    ICON_C78_89="gpm-battery-080-charging"
    ICON_C90_100="gpm-battery-100-charging"
    ICON_D0_5="gpm-battery-000"
    ICON_D6_9="gpm-battery-020"
    ICON_D10_19="gpm-battery-020"
    ICON_D20_29="gpm-battery-040"
    ICON_D30_41="gpm-battery-040"
    ICON_D42_53="gpm-battery-040"
    ICON_D54_65="gpm-battery-060"
    ICON_D66_77="gpm-battery-060"
    ICON_D78_89="gpm-battery-080"
    ICON_D90_100="gpm-battery-100"
    ICON_AC="ac-adapter"
    ICON_ERR="dialog-error"
fi

#
########################## MAIN SCRIPT ############################
#
# Check for existence of a battery first
function is_battery(){
if [[ -z `ls /proc/acpi/battery/` ]]; then
    BATT=0
    PLUGGED=0
    BRIGHT=
else
    BATT=1
    BRIGHT="Brightness!yad-brightness!system-brightness|"
fi
}
# Set some indexes to be used later in the script
# It is possible for someone to plug and unplug the AC adapter a few times
# during the same battmon cycle, so these should be reset each time
function index(){
i=1
j=1
k=1
m=1
X=60
}

########################### Main functions #########################
# Create system tray icon using yad
function mains_power(){
# Just send the ac-adapter icon and static tooltip
echo "icon:$ICON_DIR$ICON_AC" >&3 
echo "tooltip:Running off mains power." >&3
}

function systray(){
# Gather information on current battery status
PLUGGED=$(acpi -a | awk -F ": " '{print $2}')
CHARGE=$(acpi -b | awk -F ", " '{print $2}' | sed 's/%//')
INFO=$(acpi -b | awk -F ": " '{print $2}' | awk -F "," '{print $1 " -" $2 "," $3}')

# Set the appropriate tray icon for the battery level
case $PLUGGED in 
   ("on-line")
	# If we get a null charge status, then show AC icon as we are at least 
    # plugged in eg if the battery falls out!
	if [ -z $CHARGE ]; then	
		echo "icon:$ICON_DIR$ICON_AC" >&3 
		echo "tooltip:Battery status unknown or missing: $PLUGGED" >&3
	elif [ $CHARGE -ge 90 ]; then
		echo "icon:$ICON_DIR$ICON_C90_100" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 78 ]; then
		echo "icon:$ICON_DIR$ICON_C78_89" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 66 ]; then
		echo "icon:$ICON_DIR$ICON_C66_77" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 54 ]; then
		echo "icon:$ICON_DIR$ICON_C54_65" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 42 ]; then
		echo "icon:$ICON_DIR$ICON_C42_53" >&3
		echo "tooltip:Battery status: $INFO." >&3		
	elif [ $CHARGE -ge 30 ]; then
		echo "icon:$ICON_DIR$ICON_C30_41" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 20 ]; then
		echo "icon:$ICON_DIR$ICON_C20_29" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 10 ]; then
		echo "icon:$ICON_DIR$ICON_C10_19" >&3
		echo "tooltip:Battery status: $INFO." >&3
   	elif [ $CHARGE -ge 6 ]; then
		echo "icon:$ICON_DIR$ICON_C6_9" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -le 5 ]; then
		echo "icon:$ICON_DIR$ICON_C0_5" >&3 
		echo "tooltip:Battery status: $INFO." >&3
	fi
	;;
   ("off-line")
	# If we get a null charge status, then we can't monitor properly
	if [ -z $CHARGE ]; then	
		echo "icon:$ICON_DIR$ICON_D0_5" >&3 
		echo "tooltip:$PLUGGED: Battery status unknown." >&3
	elif [ $CHARGE -ge 90 ]; then
		echo "icon:$ICON_DIR$ICON_D90_100" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 78 ]; then
		echo "icon:$ICON_DIR$ICON_D78_89" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 66 ]; then
		echo "icon:$ICON_DIR$ICON_D66_77" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 54 ]; then
		echo "icon:$ICON_DIR$ICON_D54_65" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 42 ]; then
		echo "icon:$ICON_DIR$ICON_D42_53" >&3
		echo "tooltip:Battery status: $INFO." >&3		
	elif [ $CHARGE -ge 30 ]; then
		echo "icon:$ICON_DIR$ICON_D30_41" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 20 ]; then
		echo "icon:$ICON_DIR$ICON_D20_29" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -ge 10 ]; then
		echo "icon:$ICON_DIR$ICON_D10_19" >&3
		echo "tooltip:Battery status: $INFO." >&3
   	elif [ $CHARGE -ge 6 ]; then
		echo "icon:$ICON_DIR$ICON_D6_9" >&3
		echo "tooltip:Battery status: $INFO." >&3
	elif [ $CHARGE -le 5 ]; then
		echo "icon:$ICON_DIR$ICON_D0_5" >&3 
		echo "tooltip:Battery status: $INFO." >&3
	fi
	;;
   (*)  # In case of an error message or null value return from acpi
	echo "icon:$ICON_DIR$ICON_ERR" >&3 
	notify-send "Battery error" "Battery error – unknown error, exiting in 10 seconds…" -i $ICON_DIR$ICON_ERR
	echo "tooltip:Battery error" >&3
	sleep 10
	exit 1
	;;
esac
}

# Warning messages via tray baloon dialog at 20, 15 and 10% remaining
function warning_le20(){
notify-send "Battery charge is low" "Warning, battery charge has only ${CHARGE}% remaining." -i $ICON_DIR$ICON_D10_19
let i=i+1
}
function warning_le15(){
notify-send "Battery charge is low" "Warning, battery charge has only ${CHARGE}% remaining." -i $ICON_DIR$ICON_D10_19
let j=j+1
}
function warning_le10(){
notify-send "Battery charge is low" "Warning, battery charge has only ${CHARGE}% remaining." -i $ICON_DIR$ICON_D10_19
let k=k+1
}

# Final warning message at 5% before battery runs out
function warning_critical(){
if [ $BEEP = 1 ]; then
	echo -en "\x07"
fi
if [ $HIB = 0 ]; then
	notify-send "Battery charge is critical" "Warning, battery charge has only ${CHARGE}% remaining.\nSwitch to mains power immediately or save all work now!\nComputer will loose power imminently…" -i $ICON_DIR$ICON_D0_5
elif [ $HIB = 1 ]; then
	while [ $X -ge 1 ]; do
		notify-send "Battery charge is critical" "Warning, battery charge has only ${CHARGE}% remaining.\nSwitch to mains power immediately or save all work now!\nComputer will hibernate in $X seconds…" -i $ICON_DIR$ICON_D0_5
		PLUGGED2=$(acpi -a | awk -F ": " '{print $2}')
		if [[ "$PLUGGED2" == "on-line" ]]; then
			break
		fi
		sleep 5
		let X=X-5
	done
	# One last chance to plug in!
	PLUGGED2=$(acpi -a | awk -F ": " '{print $2}')
	if [[ "$PLUGGED2" == "on-line" ]]; then
		systray
		index
	elif [[ "$PLUGGED2" == "off-line" ]]; then
		notify-send "Battery charge is critical" "Preparing to hibernate computer…" -i $ICON_DIR$ICON_D0_5
		dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Hibernate
	fi
fi	
}

# Main monitoring function to monitor battery status and do something if there 
# is a change in status
function monitoring(){
case $PLUGGED in 
   ("on-line")
	systray
	index
	;;
   ("off-line")
	if [ $CHARGE -gt 20 ]; then
		systray
	elif [ $CHARGE -gt 15 ]; then
		systray
		while [ $i -le 1 ]; do
			warning_le20
		done
	elif [ $CHARGE -gt 10 ]; then
		systray
		while [ $j -le 1 ]; do
			warning_le15
		done
	elif [ $CHARGE -ge 6 ]; then
		systray
		while [ $k -le 1 ]; do
			warning_le10
		done
	elif [ $CHARGE -le 5 ]; then
		#As long as charge is less than 5% and we're on battery
		# gonna display a warning every minute!
		systray
		warning_critical
		c=1
		for (( c=1; c<=5; c++ )); do
			systray
			# Wait for $c x 10 seconds...
			CHARGE=$(acpi -b | awk -F ", " '{print $2}' | sed 's/%//')
			PLUGGED2=$(acpi -a | awk -F ": " '{print $2}')
			if [[ "$PLUGGED2" == "on-line" ]]; then
				# Mains adapter attached in the nick of time! 
				# Should now be charging... update icon and break loop
				systray
				index
				break
			fi
			sleep 10
		done
	fi
	;;
esac
}

############################## Start the applet ################################
# Create a randomly generated title ID for the applet so we can identify it and 
# kill it later
ID=$RANDOM

# Initiate monitoring functions
is_battery
index

# Create system tray icon which will listen for updates
exec 3> >(yad --kill-parent --notification --title "$ID" --listen --command="xfce4-power-manager -c" \
--menu="${BRIGHT}Screen Resolution!lxrandr!display|Screen Lock Settings!light-locker-settings!preferences-desktop-screensaver|Power Settings!xfce4-power-manager -c!gnome-power-manager")

# Get pid numbers of the yad notification applet and export them to a file so 
# they can be killed by the user
YADPID=$(ps axf | grep "yad --kill-parent --notification --title "$ID" --listen" | awk '{print $1}' | sed q )
rm -f /tmp/yadpid.tmp
echo "$YADPID" >> /tmp/yadpid.tmp

# The main loop to ensure that the yad icon doesn't disappear and to check if 
# the user has plugged in or unplugged the AC adapter or inserted a battery
while true; do
    while [ $BATT = 0 ]; do
        mains_power
        sleep $DELAY
        is_battery
    done
    systray
    monitoring
    sleep $DELAY
    is_battery
done
